[{"content":"信锐网络工程师笔记整理 项目管理工具获取 项目管理的材料可以在“信锐技术服务中心”微信小程序-\u0026gt;资料库-\u0026gt;服务工具-\u0026gt;项目交付工具包中获取。 ps：需要点击“我的”进行登录后才能查 看。\n无线项目管理流程 启动阶段 规划阶段 执行阶段 收尾阶段 lcare交付系统 生成实施单 项目完结+满意回访 工程师 项目信息获取-\u0026gt;项目启动会 需求+业务画像梳理-\u0026gt;方案设计 设备施工安装+基础调试-\u0026gt;业务联调 质量工具检查+预验收-\u0026gt;交付确认+培训+移交+服务方案 启动阶段 项目相关资料：招标文件、设计方案、设备清单 识别并理解干系人预期 明确功能预期和交付时间预期 规划阶段 需求梳理：挖掘客户潜在需求 业务需求： 业务需求:了解客户的使用场景、客户核心业务、业务使用群体、终端使用类型，识别出客户业务中潜在的需求 功能需求：客户基于自身业务提出的功能需求 服务需求：客户在交付过程中或售后运维中，基于产品或业务需求所提出的服务性需求 管理需求： 运维人员：运维人员更加关注产品基本功能的实现与后期运维管理方面的需求 客户高层：客户高层更加关注当前项目给业务或生产带来的价值以及项目背后的影响 业务画像：根据客户业务描绘业务画像 实施方案：形成最终方案 执行阶段 施工安装 调试配置 业务联调 施工安装校验 必配项 已知问题规避 核对实施方案功能配置\n关注功能实现及业务网优验收 问题管理 全过程问题追踪表\n问题跟踪闭环 企业级认证 认证流程： PC端：\n点击无线\u0026ndash;\u0026gt;输入用户名和密码\u0026ndash;\u0026gt;认证成功\u0026ndash;\u0026gt;分配IP地址上网\n手机端：\n点击无线\u0026ndash;\u0026gt;输入用户名和密码\u0026ndash;\u0026gt;认证成功\u0026ndash;\u0026gt;分配IP地址上网\n企业级认证原理介绍 企业级认证（即802.1X认证）为典型的Client/Server结构，包括三个实体：客户端、接入设备和认证服务器。 客户端是位于局域网段一端的一个实体，由该链路另一端的接入设备对其进行认证。 用户可以通过启动客户端软件发起802.1x认证。客户端必须支持局域网上的可扩展认证协议EAPOL 接入设备是位于局域网段一端的另一个实体，对所连接的客户端进行认证。 接入设备通常为支持802.1x协议的网络设备，它为客户端提供接入局域网的接口，在无线中，接入设备指的是无线AP。 认证服务器是为接入设备提供认证服务的实体。 认证服务器用于对用户进行认证、授权和计费，通常为RADIUS服务器，信锐NAC内置RADIUS服务器，也可以对接外部的RADIUS服务器 EAP协议报文的交互形式 EAP协议报文使用EAPOL封装格式，并直接承载于LAN环境中 ","date":"2024-10-17T13:07:20+08:00","image":"https://download.sangfor.com.cn/71562eb90eca447abe3a7733062e06eb.jpg","permalink":"http://localhost:1313/p/%E4%BF%A1%E9%94%90%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/","title":"信锐网络工程师笔记整理"},{"content":"对gorm的理解 Gorm简介 Gorm 是 Go 语言中常用的 ORM（对象关系映射）框架，帮助开发者以面向对象的方式操作数据库，简化了 SQL 语句的编写。\n特点： 自动迁移：Gorm 可以根据结构体自动创建、更新数据库表，支持自动迁移（Auto Migration）。这使得表结构的维护更加简单。 丰富的查询功能：支持链式操作，查询语句直观易懂，支持条件查询、关联查询、批量查询等复杂操作。 事务支持：Gorm 提供了对事务的支持，允许开发者通过 DB.Transaction() 方法简便地执行事务操作，确保数据一致性。 钩子函数：支持生命周期钩子函数（如 BeforeCreate、AfterCreate 等），在数据操作前后执行特定逻辑，方便实现一些业务逻辑。 多数据库支持：Gorm 支持常见的关系型数据库如 MySQL、PostgreSQL、SQLite 等，跨数据库切换较为方便。 核心功能： 模型定义：通过定义结构体，Gorm 可以将 Go 的结构体映射为数据库中的表，如字段类型、约束等都可以通过结构体的标签（Tag）定义。 查询操作：支持常见的查询操作，如 First() 查找第一条记录、Find() 查找多条记录，还可以通过 Where() 方法实现条件查询。 关联查询：Gorm 支持模型之间的一对一、一对多、多对多等关联关系，提供了 Preload() 和 Joins() 等方法实现关联数据的查询。 创建、更新、删除：Gorm 提供了简便的创建、更新和删除数据的方法，如 Create() 创建记录，Save() 保存或更新记录，Delete() 删除记录。 事务管理： 支持通过 Transaction() 方法进行事务管理，开发者可以在同一个事务中执行多个数据库操作，确保数据的一致性。\n适用场景： Gorm 适用于 Go 项目中与数据库交互频繁的场景，特别是需要简化数据库操作并保证代码可读性的项目。 由于 Gorm 提供了丰富的 ORM 功能，适合用在需要与多个表进行复杂交互的项目中，比如电商平台、企业级管理系统等。 常用的命令语句 ","date":"2024-10-16T22:01:54+08:00","image":"https://ucarecdn.com/9aa429b5-25e4-432f-a9f6-899820700e41/","permalink":"http://localhost:1313/p/%E5%AF%B9gorm%E7%9A%84%E7%90%86%E8%A7%A3/","title":"对gorm的理解"},{"content":"基础语法错误 力扣刷题错误： 问题：将数字转成字符串来处理没使用strconv.Itoa(x)，而是直接string(x)，导致出错。 原因：string(x)会将整数作为字符的 ASCII 码值进行转换，而不是将其转换为字符串表示形式。 ","date":"2024-10-16T21:59:48+08:00","image":"https://www.ejdz.cn/uploads/images/kind/20221025/20221025101907_38470.jpg","permalink":"http://localhost:1313/p/%E9%97%AF%E7%A5%B8%E5%B0%8F%E5%90%88%E9%9B%86/","title":"闯祸小合集"},{"content":"对Gin的理解 Gin简介 以下内容参考Gin Web Framework 什么是Gin? Gin是一个使用Go语言开发的Web框架。 它提供类似Martini的API，但性能更佳，速度提升高达40倍。 如果你是性能和高效的追求者, 你会爱上 Gin。\n特点 快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。 支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。 Crash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！ JSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。 路由组：Gin帮助您更好地组织您的路由，例如，按照需要授权和不需要授权和不同API版本进行分组。此外，路由分组可以无限嵌套而不降低性能。 错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。 内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。 可扩展性：新建一个中间件非常简单。 核心概念与功能 Context 对象：gin.Context 是处理请求的核心对象，包含了请求和响应的所有信息。开发者可以通过它获取请求参数、查询参数、表单数据、JSON 数据等，同时也可以向前端返回响应。 路由定义：Gin 提供 RESTful 风格的路由支持，可以轻松定义 GET、POST、PUT、DELETE 等请求方法。路由还支持动态路径参数，如 c.Param() 可以获取路径中的参数。 请求绑定与验证：Gin 支持将请求的 JSON、表单数据等绑定到结构体，并提供验证功能，如通过 ShouldBindJSON() 绑定并校验请求参数。 文件上传：Gin 支持多部分表单数据（multipart form）的解析，处理文件上传操作非常简便。 Gin 的应用场景 Gin 适用于开发轻量级、高并发的 Web 服务和 API 项目，尤其是需要快速开发、性能优先的场景。 由于 Gin 的 API 设计简洁易用，并且扩展性强，它在微服务架构中也非常常见。 个简单的Gin应用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \u0026#34;github.com/gin-gonic/gin\u0026#34; func main() { r := gin.Default() // 创建带有默认中间件的路由器(Logger和Recovery) // 定义一个 GET 路由，处理 /ping 请求 r.GET(\u0026#34;/ping\u0026#34;, func(c *gin.Context) { //将结果以 JSON 格式返回给客户端。 c.JSON(200, gin.H{ \u0026#34;message\u0026#34;: \u0026#34;pong\u0026#34;, }) }) // 启动服务，监听在 8080 端口 r.Run(\u0026#34;:8080\u0026#34;) } r.GET(\u0026quot;/ping\u0026quot;, func(c *gin.Context){}) GET是请求方法 /ping是路由，它可以根据需要自行定义 func(c *gin.Context)是处理函数 c 是上下文对象 c.JSON(200, gin.H{}) c.JSON()返回 JSON 格式的响应 200状态码 gin.H{}等同于map[string]interface{}{...}通常用于返回 JSON 数据或者向 HTML 模板传递数据。 ps:interface{} 是 Go 语言中的万能类型，任何类型都可以作为它的值 Gin使用 带参路由与查询参数处理 1 2 3 4 5 6 7 8 9 10 11 12 13 r.GET(\u0026#34;/ping/:studentID\u0026#34;, func(c *gin.Context) { // 从 URL 中获取 studentID studentID := c.Param(\u0026#34;studentID\u0026#34;) // 获取查询参数 name name := c.Query(\u0026#34;name\u0026#34;) //数据处理逻辑... //返回响应内容 c.JSON(200, gin.H{ \u0026#34;isfind\u0026#34;: \u0026#34;true\u0026#34;, }) }) JSON 解析和绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 type Login struct { Username string `json:\u0026#34;username\u0026#34;` Password string `json:\u0026#34;password\u0026#34;` } r.POST(\u0026#34;/api/user/auth\u0026#34;, func(c *gin.Context) { // 从请求体中读取 POST 表单参数 var json Login // 绑定JSON数据到结构体 if err := c.ShouldBindJSON(\u0026amp;json); err != nil { c.JSON(http.StatusBadRequest, gin.H{\u0026#34;error\u0026#34;: err.Error()}) return } //从结构体中拿出数据 username := json.Username password := json.Password //处理数据 //返回响应内容 c.JSON(200, gin.H{ \u0026#34;code\u0026#34;: 0, \u0026#34;token\u0026#34;: token, }) } else { c.JSON(400, gin.H{ \u0026#34;code\u0026#34;: -1, \u0026#34;message\u0026#34;: \u0026#34;账号或者密码错误\u0026#34;, }) }) 处理请求头中内容 这里以Authorization为例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 r.GET(\u0026#34;/api/user/data/student\u0026#34;, func(c *gin.Context) { fmt.Print(\u0026#34;1111\u0026#34;) authHeader := c.GetHeader(\u0026#34;Authorization\u0026#34;) fmt.Println(authHeader) if authHeader == \u0026#34;\u0026#34; { c.JSON(401, gin.H{ \u0026#34;code\u0026#34;: -1, \u0026#34;message\u0026#34;: \u0026#34;未提供认证方式\u0026#34;, }) return } token := \u0026#34;\u0026#34; if len(authHeader) \u0026gt; 7 \u0026amp;\u0026amp; authHeader[:7] == \u0026#34;Bearer \u0026#34; { token = authHeader[7:] } else { c.JSON(400, gin.H{ \u0026#34;code\u0026#34;: -1, \u0026#34;message\u0026#34;: \u0026#34;无效的认证方式\u0026#34;, }) return } valid, err := utils.VerifyToken(token) if err != nil || !valid { c.JSON(403, gin.H{ \u0026#34;code\u0026#34;: -1, \u0026#34;message\u0026#34;: \u0026#34;无效的token\u0026#34;, }) return } var users []utils.StudentNew result := utils.DB.Find(\u0026amp;users) if result.Error != nil { c.JSON(400, gin.H{ \u0026#34;code\u0026#34;: -1, \u0026#34;message\u0026#34;: \u0026#34;查询出错\u0026#34;, }) return } else { c.JSON(200, users) } }) 文件接收与处理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 r.POST(\u0026#34;/api/file/data/import/excel\u0026#34;, func(c *gin.Context) { file, err := c.FormFile(\u0026#34;file\u0026#34;) if err != nil { c.JSON(http.StatusBadRequest, gin.H{\u0026#34;error\u0026#34;: \u0026#34;文件上传失败\u0026#34;}) return } // 保存文件到本地 filePath := filepath.Join(\u0026#34;./\u0026#34;, file.Filename) if err := c.SaveUploadedFile(file, filePath); err != nil { c.JSON(http.StatusInternalServerError, gin.H{\u0026#34;error\u0026#34;: \u0026#34;文件保存失败\u0026#34;}) return } // 解析文件并存储到数据库 if err := utils.ParseAndSaveExcel(filePath); err != nil { c.JSON(http.StatusInternalServerError, gin.H{\u0026#34;error\u0026#34;: \u0026#34;文件解析失败\u0026#34;, \u0026#34;details\u0026#34;: err.Error()}) return } //返回响应内容 c.JSON(http.StatusOK, gin.H{ \u0026#34;code\u0026#34;: 0, \u0026#34;data\u0026#34;: filePath, }) }) 路由组(网上内容，后期替换) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; ) func main() { router := gin.Default() // 路由组 v1 := router.Group(\u0026#34;/api/v1\u0026#34;) { v1.GET(\u0026#34;/users\u0026#34;, func(c *gin.Context) { c.String(200, \u0026#34;List of users\u0026#34;) }) v1.POST(\u0026#34;/users\u0026#34;, func(c *gin.Context) { c.String(200, \u0026#34;Create a user\u0026#34;) }) v1.PUT(\u0026#34;/users/:id\u0026#34;, func(c *gin.Context) { id := c.Param(\u0026#34;id\u0026#34;) c.String(200, \u0026#34;Update user with ID: %s\u0026#34;, id) }) v1.DELETE(\u0026#34;/users/:id\u0026#34;, func(c *gin.Context) { id := c.Param(\u0026#34;id\u0026#34;) c.String(200, \u0026#34;Delete user with ID: %s\u0026#34;, id) }) } router.Run(\u0026#34;:8080\u0026#34;) } 模板渲染(网上内容，后期替换) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { router := gin.Default() // 加载模板文件 router.LoadHTMLGlob(\u0026#34;templates/*\u0026#34;) // 定义路由处理函数，渲染模板 router.GET(\u0026#34;/hello\u0026#34;, func(c *gin.Context) { c.HTML(http.StatusOK, \u0026#34;hello.tmpl\u0026#34;, gin.H{ \u0026#34;title\u0026#34;: \u0026#34;Hello, Gin!\u0026#34;, }) }) router.Run(\u0026#34;:8080\u0026#34;) } 静态文件服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \u0026#34;github.com/gin-gonic/gin\u0026#34; func main() { router := gin.Default() // 从相对路径 \u0026#34;assets\u0026#34; 提供静态文件 router.Static(\u0026#34;/static\u0026#34;, \u0026#34;./assets\u0026#34;) // 从绝对路径 \u0026#34;/tmp\u0026#34; 提供静态文件 router.StaticFS(\u0026#34;/static2\u0026#34;, http.Dir(\u0026#34;/tmp\u0026#34;)) // 提供单个静态文件 router.StaticFile(\u0026#34;/favicon.ico\u0026#34;, \u0026#34;./resources/favicon.ico\u0026#34;) router.Run(\u0026#34;:8080\u0026#34;) } 补充知识 c *gin.Context的方法 c.ShouldBindJSON()获取JSON格式数据 c.Param()从URL中获取参数 c.Query()获取查询参数 c.FormFile()获取文件 c.GetHeader()获取请求头 c.SaveUploadedFile()保存文件 请求方法与路由 常用的HTTP方法有 GET：用于从服务器获取资源。 POST：用于向服务器发送数据或提交表单。 PUT：用于更新服务器上的资源。 DELETE：用于删除服务器上的资源。 路由 静态路由：简单的固定路径，比如/ping 动态路由：也叫参数化路由，路径中包含变量占位符，比如/ping/:id 当用户访问 /user/123 时，Gin 会解析 :id 并将其值作为参数传递给处理函数。在处理函数中通过 c.Param(\u0026ldquo;id\u0026rdquo;) 获取该值 状态码 HTTP 状态码分类： 1xx - 信息性响应（Informational Responses）： 表示请求已经被接收，继续处理。\n100 Continue：服务器已经接收到请求的初始部分，客户端可以继续发送请求的其余部分。 101 Switching Protocols：请求者要求服务器切换协议，服务器确认切换。 2xx - 成功（Success）： 表示请求成功并被服务器处理。\n200 OK：请求成功，服务器返回所请求的数据。 201 Created：请求已成功，并且资源已经被创建（常见于 POST 请求创建新资源的场景）。 204 No Content：请求成功，但没有返回内容（如执行了 DELETE 请求后没有内容需要返回）。 3xx - 重定向（Redirection）： 表示客户端需要进一步操作才能完成请求，通常是重定向。\n301 Moved Permanently：资源的 URL 已被永久更改，客户端应使用新的 URL。 302 Found：资源临时重定向到新的 URL。 304 Not Modified：资源未被修改，客户端可以使用缓存的版本。 4xx - 客户端错误（Client Errors）： 表示请求存在错误，客户端需要修改请求才能继续。\n400 Bad Request：请求有语法错误，服务器无法理解。 401 Unauthorized：请求未经授权，需进行身份验证。 403 Forbidden：服务器拒绝执行请求，即使请求经过身份验证。 404 Not Found：请求的资源不存在或无法找到。 405 Method Not Allowed：请求的 HTTP 方法（如 GET、POST）不被允许。 5xx - 服务器错误（Server Errors）： 表示服务器在处理请求时发生了内部错误。\n500 Internal Server Error：服务器遇到未知错误，无法处理请求。 501 Not Implemented：服务器不支持请求所需的功能。 502 Bad Gateway：服务器作为网关或代理，从上游服务器接收到无效响应。 503 Service Unavailable：服务器暂时无法处理请求，通常是因为服务器超载或维护。 常见的状态码解释： 200 OK：表示请求正常处理并返回成功。 400 Bad Request：表示客户端发送的请求有问题，通常是因为格式错误。 401 Unauthorized：表示用户没有权限访问请求的资源，通常需要身份验证。 403 Forbidden：表示请求被服务器拒绝，用户没有权限，即使身份验证通过。 404 Not Found：表示请求的资源不存在，可能是 URL 错误。 500 Internal Server Error：表示服务器内部错误，导致请求无法完成。 ","date":"2024-10-16T21:59:48+08:00","image":"https://pic.netbian.com/uploads/allimg/240410/223535-17127597352a25.jpg","permalink":"http://localhost:1313/p/%E5%AF%B9gin%E7%9A%84%E7%90%86%E8%A7%A3/","title":"对Gin的理解"},{"content":"常用快捷键 vscode常用快捷键 代码编辑 格式化代码：Shift + Alt + F 快速注释/取消注释：Ctrl + / 向下复制一行：Shift + Alt + ↓ 向上复制一行：Shift + Alt + ↑ 向下移动一行：Alt + ↓ 向上移动一行: Alt + ↑ 删除一行：Ctrl + Shift + K 选择当前行：Ctrl + L 查找与替换 查找：Ctrl + F 查找并替换：Ctrl + H 全局查找：Ctrl + Shift + F 补充(未完待续) ","date":"2024-10-16T21:40:40+08:00","image":"https://pic.netbian.com/uploads/allimg/240924/112858-172714853802c6.jpg","permalink":"http://localhost:1313/p/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","title":"常用快捷键"},{"content":"Git基础用法 Git 配置 设置用户名 1 git config --global user.name \u0026#34;Your Name\u0026#34; 设置邮箱 1 git config --global user.email \u0026#34;you@example.com\u0026#34; 查看配置信息 1 git config --list Git 仓库 初始化一个新的 Git 仓库 1 git init 克隆远程仓库 1 git clone \u0026lt;repository-url\u0026gt; 文件操作 添加文件到暂存区（Staging Area） 1 2 git add \u0026lt;file\u0026gt; - 添加单个文件 git add . - 添加所有修改的文件 提交到本地仓库 1 git commit -m \u0026#34;Commit message\u0026#34; 删除文件 1 git rm \u0026lt;file\u0026gt; 重命名文件 1 git mv \u0026lt;old-filename\u0026gt; \u0026lt;new-filename\u0026gt; 查看状态与历史 查看当前工作区状态 1 git status 查看提交历史 1 git log 查看提交记录简洁版本 1 git log --oneline 分支操作 查看分支列表 1 git branch 创建新分支 1 git branch \u0026lt;branch-name\u0026gt; 切换到指定分支 1 git checkout \u0026lt;branch-name\u0026gt; 创建并切换到新分支 1 git checkout -b \u0026lt;branch-name\u0026gt; 合并分支 1 git merge \u0026lt;branch-name\u0026gt; 删除分支 1 git branch -d \u0026lt;branch-name\u0026gt; 远程仓库操作 查看当前远程仓库 1 git remote -v 添加远程仓库 1 git remote add origin \u0026lt;repository-url\u0026gt; 从远程仓库拉取代码 1 git pull origin \u0026lt;branch-name\u0026gt; 推送代码到远程仓库 1 git push origin \u0026lt;branch-name\u0026gt; 撤销与回退 撤销工作区修改 1 git checkout -- \u0026lt;file\u0026gt; 撤销暂存区的修改 1 git reset \u0026lt;file\u0026gt; 回退到上一个提交版本 1 git reset --hard HEAD^ 回退到某个提交版本 1 git reset --hard \u0026lt;commit-id\u0026gt; ","date":"2024-10-16T21:15:12+08:00","image":"https://pic.netbian.com/uploads/allimg/231016/223346-16974668265cf4.jpg","permalink":"http://localhost:1313/p/git%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/","title":"Git基础用法"},{"content":"通过 hugo 创建个人博客 hugo 官网 hugo 中文文档 一、安装 Hugo ps: 这里默认已经安装好了 Git、Go等其它工具\n进入hugo 下载链接中下载压缩包，推荐下载扩展版\n解压压缩包至自己准备好的文件夹\n进入该文件夹，并在命令行中输入以下命令来创建一个新的站点\n1 .\\hugo.exe new site myblog 创建新站点后就可以进入 myblog 文件夹中运行一下 Hugo 开发服务器来测试是否安装成功 1 2 cd myblog ..\\hugo.exe server -D 二、添加内容 1、添加主题 命令行方式 输入命令添加主题 1 2 git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke eg：https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke\n然后修改 myblog 文件夹中的 config.toml 文件，将主题设置为 ananke 1 theme = \u0026#34;ananke\u0026#34; 自行下载方式（推荐） 进入hugo 官网，直接点击Themes来选择自己喜欢的主题进行下载 将下载好的压缩包放入 myblog/themes 文件夹中并解压 将配置文件复制到根目录中，替换根目录中原本的配置文件（具体主题之间会有一定差异） 完成后运行查看是否添加成功 一些hugo的命令指令 添加新的文章内容 1 .\\hugo.exe new content eg：.\\hugo.exe new content post/通过hugo创建个人博客/通过hugo创建个人博客.md\n未完待续 ","date":"2024-10-16T21:03:14+08:00","permalink":"http://localhost:1313/p/%E9%80%9A%E8%BF%87hugo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"通过hugo创建个人博客"},{"content":"Markdown 基础用法（持续更新中） 1. 标题 使用 # 来表示不同级别的标题： 一级标题 二级标题 三级标题 2. 强调（加粗、斜体） 加粗: 使用两个星号 ** 或者两个下划线 __。 斜体：使用一个星号 * 或者一个下划线 _。 加粗加斜体：三个星号 ***。 加粗\n斜体\n加粗加斜体\n3. 列表 无序列表：使用 -、* 或者 +。 有序列表：使用数字加上句点 1.。 项目 1 项目 2 子项目 1 子项目 2 第一项 第二项 4. 链接与图片 链接: 链接文字。 图片: 。 百度\n5. 引用 使用 \u0026gt; 表示引用。 这是一个引用\n6. 代码 行内代码：使用反引号 ` 代码块：使用三个反引号 这是 行内代码 示例。\n这是一个代码块。\n7. 分隔线 使用三个或以上的 -、* 或 _ 8. 表格 使用 | 分隔列，使用 - 分隔表头和内容。 表头 1 表头 2 内容 1 内容 2 内容 3 内容 4 在 Markdown 表格中，可以通过 \u0026lt;br\u0026gt; 标签实现单元格内的换行 姓名 描述 张三 学生\n擅长编程 李四 老师\n数学专业 ","date":"2024-10-16T00:00:00Z","image":"https://pic.netbian.com/uploads/allimg/241017/235413-17291804539de2.jpg","permalink":"http://localhost:1313/p/markdown%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/","title":"Markdown基础用法"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"http://localhost:1313/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"http://localhost:1313/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:1313/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"http://localhost:1313/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"}]